{"version":3,"sources":["components/NewNoteInput.tsx","components/PersonItem.tsx","actions/actions.ts","components/PersonList.tsx","components/PersonForm.tsx","components/PersonAge.tsx","components/App.tsx","serviceWorker.ts","reducers/noteReducer.ts","reducers/PersonReducer.ts","reducers/personUpdateReducer.ts","stores/stores.ts","reducers/filterAgeReducer.ts","index.tsx"],"names":["NewNoteInput","addNote","useState","note","setNote","onChange","event","target","value","type","name","placeholder","onClick","PersonItem","persons","useSelector","state","personReducer","filterName","filterAgeReducer","filter","person","indexOf","dispatch","useDispatch","elements","map","key","id","age","gender","payload","deletePerson","getUpdatePerson","onUpdatePerson","PersonList","className","PersonForm","setPerson","personUpdate","personUpdateReducer","console","log","useEffect","updateInputData","e","oldPerson","onSubmit","preventDefault","addPerson","PersonAge","onfilterAge","App","notes","Boolean","window","location","hostname","match","initialState","findIndex","result","forEach","index","rootReducer","combineReducers","notesReducer","action","index2","push","splice","store","createStore","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.defc4660.chunk.js","sourcesContent":["import React, { ChangeEvent, useState } from \"react\";\r\n\r\ninterface NewNoteInputProps {\r\n  addNote(note: string): void;\r\n}\r\n\r\nexport const NewNoteInput: React.FC<NewNoteInputProps> = ({ addNote }) => {\r\n  const [note, setNote] = useState(\"\");\r\n\r\n  const upDateNote = (event: ChangeEvent<HTMLInputElement>) => {\r\n    setNote(event.target.value);\r\n  };\r\n  \r\n\r\n  const onAddNote = () => {\r\n    addNote(note);\r\n    setNote(\"\");\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <input onChange={upDateNote} type=\"text\" name=\"note\" placeholder=\"NOTE\" />\r\n      <button onClick={onAddNote}>ADD NOTE</button>\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { Person } from \"./../reducers/PersonReducer\";\r\nimport { RootState } from \"./../stores/stores\";\r\nimport { deletePerson, getUpdatePerson } from \"./../actions/actions\";\r\n\r\nexport const PersonItem = (): JSX.Element => {\r\n  let persons: Person[] = useSelector<RootState, Person[]>(\r\n    (state) => state.personReducer\r\n  );\r\n\r\n  const filterName: string = useSelector<RootState, string>(\r\n    (state) => state.filterAgeReducer\r\n  );\r\n\r\n  if (filterName) {\r\n    persons = persons.filter((person) => {\r\n      return person.name.indexOf(filterName) !== -1;\r\n    });\r\n  }\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const onDeletePerson = (id: string) => {\r\n    dispatch(deletePerson(id));\r\n  };\r\n\r\n  const onUpdatePerson = (person: Person) => {\r\n    dispatch(getUpdatePerson(person));\r\n  };\r\n\r\n  const elements = persons.map((person) => {\r\n    return (\r\n      <tr key={person.id}>\r\n        <td>{person.id}</td>\r\n        <td>{person.name}</td>\r\n        <td>{person.age}</td>\r\n        <td>{person.gender ? \"MALE\" : \"FEMALE\"}</td>\r\n        <td>\r\n          <button type=\"button\" onClick={() => onDeletePerson(person.id)}>\r\n            DELETE\r\n          </button>\r\n        </td>\r\n        <td>\r\n          <button type=\"button\" onClick={() => onUpdatePerson(person)}>\r\n            UPDATE\r\n          </button>\r\n        </td>\r\n      </tr>\r\n    );\r\n  });\r\n\r\n  return <tbody>{elements}</tbody>;\r\n};\r\n\r\n/* const mapStateTpProps = (state: any) => {\r\n  return {\r\n    personReducer: state.personReducer,\r\n  };\r\n};\r\n\r\nexport default connect(mapStateTpProps, null)(PersonItem); */\r\n","import { Person } from \"./../reducers/PersonReducer\";\r\nexport type ActionAddNote = { type: \"ADD_NOTE\"; payload: string };\r\nexport type ActionListPerson = { type: \"LIST_PERSON\"; payload: Person };\r\nexport type ActionAddPerson = { type: \"ADD_PERSON\"; payload: Person };\r\nexport type ActionDeletePerson = { type: \"DELETE_PERSON\"; payload: string };\r\nexport type ActionGetUpdatePerson = {\r\n  type: \"GET_UPDATE_PERSON\";\r\n  payload: Person;\r\n};\r\nexport type ActionFilterName = { type: \"FILTER_AGE\"; payload: string };\r\n\r\nexport const addNote = (note: string): ActionAddNote => ({\r\n  type: \"ADD_NOTE\",\r\n  payload: note,\r\n});\r\n\r\nexport const listPerson = (person: Person): ActionListPerson => ({\r\n  type: \"LIST_PERSON\",\r\n  payload: person,\r\n});\r\n\r\nexport const addPerson = (person: Person): ActionAddPerson => ({\r\n  type: \"ADD_PERSON\",\r\n  payload: person,\r\n});\r\n\r\nexport const deletePerson = (id: string): ActionDeletePerson => ({\r\n  type: \"DELETE_PERSON\",\r\n  payload: id,\r\n});\r\n\r\nexport const getUpdatePerson = (person: Person): ActionGetUpdatePerson => ({\r\n  type: \"GET_UPDATE_PERSON\",\r\n  payload: person,\r\n});\r\n\r\nexport const filterName = (name: string): ActionFilterName => ({\r\n  type: \"FILTER_AGE\",\r\n  payload: name,\r\n});\r\n","import React from \"react\";\r\nimport { PersonItem } from \"./PersonItem\";\r\nimport { Person } from \"./../reducers/PersonReducer\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { RootState } from \"./../stores/stores\";\r\n\r\nexport const PersonList = () => {\r\n  const persons: Person[] = useSelector<RootState, Person[]>(\r\n    (state) => state.personReducer\r\n  );\r\n\r\n  return (\r\n    <table className=\"table table-bordered\">\r\n      <thead>\r\n        <tr>\r\n          <th>ID</th>\r\n          <th>NAME</th>\r\n          <th>AGE</th>\r\n          <th>GENDER</th>\r\n        </tr>\r\n      </thead>\r\n      <PersonItem />\r\n    </table>\r\n  );\r\n};\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { Person } from \"./../reducers/PersonReducer\";\r\nimport { addPerson } from \"./../actions/actions\";\r\nimport { connect, useDispatch, useSelector } from \"react-redux\";\r\nimport { RootState } from \"./../stores/stores\";\r\n\r\nexport const PersonForm = () => {\r\n  const [person, setPerson] = useState({\r\n    id: \"3\",\r\n    name: \"fdf\",\r\n    age: 232,\r\n    gender: true,\r\n  });\r\n\r\n  const personUpdate = useSelector<RootState, Person>(\r\n    (state) => state.personUpdateReducer\r\n  );\r\n\r\n  console.log(personUpdate);\r\n\r\n  useEffect(() => {\r\n    setPerson(personUpdate);\r\n  }, [personUpdate]);\r\n\r\n  const updateInputData = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    const { name, value } = e.target;\r\n    setPerson((oldPerson: Person) => ({\r\n      ...oldPerson,\r\n      [name]: value,\r\n    }));\r\n  };\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const onAddPerson = (e: React.FormEvent<HTMLFormElement>) => {\r\n    e.preventDefault();\r\n    dispatch(addPerson(person));\r\n    console.log(person);\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={onAddPerson}>\r\n      <input\r\n        type=\"text\"\r\n        className=\"form-control mb-3\"\r\n        placeholder=\"Input Id\"\r\n        name=\"id\"\r\n        value={person.id}\r\n        onChange={updateInputData}\r\n      />\r\n      <input\r\n        type=\"text\"\r\n        className=\"form-control mb-3\"\r\n        placeholder=\"Input name\"\r\n        name=\"name\"\r\n        value={person.name}\r\n        onChange={updateInputData}\r\n      />\r\n      <input\r\n        type=\"text\"\r\n        className=\"form-control\"\r\n        placeholder=\"Input age\"\r\n        name=\"age\"\r\n        value={person.age}\r\n        onChange={updateInputData}\r\n      />\r\n      <input\r\n        type=\"radio\"\r\n        name=\"gender\"\r\n        value=\"true\"\r\n        onChange={updateInputData}\r\n      />\r\n      <label className=\"mr-3\">Male</label>\r\n      <input\r\n        type=\"radio\"\r\n        name=\"gender\"\r\n        value=\"false\"\r\n        onChange={updateInputData}\r\n      />\r\n      <label>FeMale</label>\r\n      <button type=\"submit\" className=\"form-control bg-success\">\r\n        ADD\r\n      </button>\r\n    </form>\r\n  );\r\n};\r\n/* const mapStateToProps = (state: any) => {\r\n  return {\r\n    personReducer: state.personReducer,\r\n  };\r\n}; */\r\n\r\n/* const mapDispatchToProps = (dispatch: any, props: Person) => {\r\n  return {\r\n    onAddPerson: (person: Person) => {\r\n      dispatch(addPerson(person));\r\n    },\r\n  };\r\n}; */\r\n\r\n// export default connect(mapStateToProps /* mapDispatchToProps */)(PersonForm);\r\n","import React from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { filterName } from \"../actions/actions\";\r\n\r\nexport const PersonAge = () => {\r\n  const dispatch = useDispatch();\r\n\r\n  const onfilterAge = (age: string) => {\r\n    dispatch(filterName(age));\r\n  };\r\n\r\n  return (\r\n    <ul>\r\n      <li onClick={() => onfilterAge(\"1\")}>1</li>\r\n      <li onClick={() => onfilterAge(\"2\")}>2</li>\r\n      <li onClick={() => onfilterAge(\"\")}>3</li>\r\n    </ul>\r\n  );\r\n};\r\n","import React from \"react\";\nimport { NewNoteInput } from \"./NewNoteInput\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { NotesState } from \"../reducers/noteReducer\";\nimport { addNote } from \"../actions/actions\";\nimport { PersonList } from \"./PersonList\";\nimport { PersonForm } from \"./PersonForm\";\nimport { PersonAge } from \"./PersonAge\";\n\nfunction App() {\n  const notes = useSelector<NotesState, NotesState[\"notes\"]>(\n    (state) => state.notes\n  );\n  const dispatch = useDispatch();\n\n  const onAddNote = (note: string) => {\n    dispatch(addNote(note));\n  };\n\n  // console.log( notes);\n\n  return (\n    <div>\n      <div>\n        <NewNoteInput addNote={onAddNote} />\n        {/* <ul>\n          {notes.map((note) => {\n            return <li key={note}>{note}</li>;\n          })}\n        </ul> */}\n      </div>\n      <div className=\"container\">\n        <div className=\"row\">\n          <div className=\"col-3\">\n            <PersonForm />\n          </div>\n          <div className=\"col-2\">\n            <PersonAge />\n          </div>\n\n          <div className=\"col-7\">\n            <PersonList />\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { ActionAddNote } from \"../actions/actions\";\r\n\r\nexport interface NotesState {\r\n  notes: string[];\r\n}\r\n\r\nconst initialState = {\r\n  notes: [],\r\n};\r\n\r\nexport const notesReducer = (\r\n  state: NotesState = initialState,\r\n  action: ActionAddNote\r\n) => {\r\n  switch (action.type) {\r\n    case \"ADD_NOTE\": {\r\n      return { ...state, notes: [...state.notes, action.payload] };\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import {\r\n  ActionListPerson,\r\n  ActionAddPerson,\r\n  ActionDeletePerson,\r\n} from \"./../actions/actions\";\r\n\r\nexport interface Person {\r\n  id: string;\r\n  name: string;\r\n  age: number;\r\n  gender: boolean;\r\n}\r\n\r\nconst initialState: Person[] = [\r\n  { id: \"1\", name: \"2\", age: 12, gender: false },\r\n  { id: \"2\", name: \"1\", age: 2, gender: true },\r\n];\r\n\r\nexport const findIndex = (persons: Person[], id: string) => {\r\n  let result: number = -1;\r\n  persons.forEach((person, index) => {\r\n    if (person.id === id) result = index;\r\n  });\r\n  return result;\r\n};\r\n\r\nexport const personReducer = (\r\n  state: Person[] = initialState,\r\n  action: ActionListPerson | ActionAddPerson | ActionDeletePerson\r\n) => {\r\n  switch (action.type) {\r\n    case \"ADD_PERSON\":\r\n      const index2 = findIndex(state, action.payload.id);\r\n      if (index2 >= 0) {\r\n        state[index2] = action.payload;\r\n      } else {\r\n        state.push(action.payload);\r\n      }\r\n      return [...state];\r\n    case \"DELETE_PERSON\":\r\n      const index = findIndex(state, action.payload);\r\n      state.splice(index, 1);\r\n      return [...state];\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import { Person } from \"./PersonReducer\";\r\nimport { ActionGetUpdatePerson } from \"./../actions/actions\";\r\nconst initialState: Person = { id: \"\", name: \"\", age: 1, gender: true };\r\n\r\nexport const personUpdateReducer = (\r\n  state: Person = initialState,\r\n  action: ActionGetUpdatePerson\r\n) => {\r\n  switch (action.type) {\r\n    case \"GET_UPDATE_PERSON\":\r\n      return { ...action.payload };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import { createStore } from \"redux\";\r\nimport { notesReducer } from \"../reducers/noteReducer\";\r\nimport { personReducer } from \"../reducers/PersonReducer\";\r\nimport { combineReducers } from \"redux\";\r\nimport { personUpdateReducer } from \"../reducers/personUpdateReducer\";\r\nimport { filterAgeReducer } from \"../reducers/filterAgeReducer\";\r\nconst rootReducer = combineReducers({\r\n  notesReducer,\r\n  personReducer,\r\n  personUpdateReducer,\r\n  filterAgeReducer,\r\n});\r\nexport type RootState = ReturnType<typeof rootReducer>;\r\n\r\nexport const store = createStore(rootReducer);\r\n","import { ActionFilterName } from \"../actions/actions\";\r\n\r\nconst initialState = \"\";\r\n\r\nexport const filterAgeReducer = (\r\n  state: string = initialState,\r\n  action: ActionFilterName\r\n) => {\r\n  switch (action.type) {\r\n    case \"FILTER_AGE\":\r\n      console.log(action.payload);\r\n\r\n      return action.payload;\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./components/App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { Provider } from \"react-redux\";\nimport { store } from \"./stores/stores\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}